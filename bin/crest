#!/usr/bin/env bash
set -e

# PART I check weather softwares installed
command -v R >/dev/null 2>&1 || { echo >&2 "crest requires R but it is not installed. Aborting."; exit 1; }
command -v crest_edger >/dev/null 2>&1 || { echo >&2 "crest requires crest_edger but it is not installed. Aborting."; exit 1; }
command -v crest_peak_call >/dev/null 2>&1 || { echo >&2 "crest requires crest_peak_call but it is not installed. Aborting."; exit 1; }
command -v RRA >/dev/null 2>&1 || { echo >&2 "crest requires RRA but it is not installed. Aborting."; exit 1; }

# PART II usage info
usage(){
cat << EOF

Program: crest (CREST-seq analysis pipeline Ren Lab)
Version: v06.26.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
URL: https://github.com/r3fang/crest

usage: ${0##*/} [-h] [-i INPUT] [-t T1,T2,T3] [-c C1,C2,C3] [-r chr6:30132134-32138339] [-o PREFIX] [-m 5] [-s 50] [-n 3] [-p 0.05] [-l 1000] 

Example:
crest -i data/data.txt -t T1,T2,T3,T4,T5 -c C1,C2 -r chr6:30132134-32138339 -o demo

Options: 
	-h, --help                show this help message and exit.
	-i  INPUT                 input crest-standard matrix.
	-t  TREAT                 treatment sample ID, seperated by comma without space.
	-c  CONTROL               control sample ID, seperated by comma without space.
	-r  REGION                region that CREST-seq performed against (e.g. chr6:1-100).
	-o  PREFIX                prefix of outout files.
	-m  MIN_CPM               sgRNA pairs with CPM (count per million) smaller than
	                          MIN_CPM will be filtered before analysis [5].
	-s  BIN_SIZE              screened region INQUIRE_REGION will be partitioned into 
	                          a set of BIN_SIZE-bp bins [50].
	-n  MIN_COV               a bin is considered significant at least MIN_COV pairs span it [2].
	-p  FDRCUTOFF             FDR cutoff for a significant bin [0.05].
	-l  MIN_WIDTH             a peak will be extended to MIN_WIDTH if shorter [1000].

Note: To use crest, please be sure that the input matrix is in the required format.  
EOF
} 

# PART III default parameters
BIN_SIZE=50
MIN_CPM=3
FDRCUTOFF=0.05
MIN_WIDTH=1000
MIN_COV=2

# PART IV read in arguments
while getopts ":i:t:c:r:o:m:s:n:p:l:" opt;
do
	case "$opt" in
		i) INPUT=$OPTARG;;
		t) TREAT_ID=$OPTARG;;
		c) CONTROL_ID=$OPTARG;;
		r) INQUIRE_REGION=$OPTARG;;
		o) PREFIX=$OPTARG;;
		m) MIN_CPM=$OPTARG;;
		s) BIN_SIZE=$OPTARG;;
		n) MIN_COV=$OPTARG;;
		p) FDRCUTOFF=$OPTARG;;
		l) MIN_WIDTH=$OPTARG;;
		\?) usage
			echo "error: unrecoginized option -$OPTARG"
			exit 1
			;;
	esac
done

if [ $# -lt 10 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

if [ -z ${INPUT+x} ]; then 
	echo "error: missing variable -i INPUT" >&2;
	exit 1;
fi
# check if files exist
if [ ! -f $INPUT ]; then
	usage
    echo "error: input file -i '$INPUT' not exists.";
	exit 1;
fi

if [ -z ${TREAT_ID+x} ]; then 
	echo "error: missing variable -t TREAT_ID" >&2;
	exit 1;
fi

if [ -z ${CONTROL_ID+x} ]; then 
	echo "error: missing variable -c CONTROL_ID" >&2;
	exit 1;
fi

if [ -z ${INQUIRE_REGION+x} ]; then 
	echo "error: missing variable -r INQUIRE_REGION" >&2;
	exit 1;
fi

if [ -z ${PREFIX+x} ]; then 
	echo "error: missing variable -o PREFIX" >&2;
	exit 1;
fi

if [ -z ${MIN_CPM+x} ]; then 
	echo "error: missing variable -m MIN_CPM" >&2;
	exit 1;
fi 

if [ -z ${BIN_SIZE+x} ]; then 
	echo "error: missing variable -s BIN_SIZE" >&2;
	exit 1;
fi

if [ -z ${MIN_COV+x} ]; then 
	echo "error: missing variable -c MIN_COV" >&2;
	exit 1;
fi

if [ -z ${FDRCUTOFF+x} ]; then 
	echo "error: missing variable -p FDRCUTOFF" >&2;
	exit 1;
fi

if [ -z ${MIN_WIDTH+x} ]; then 
	echo "error: missing variable -l MIN_WIDTH" >&2;
	exit 1;
fi

re='^chr[0-9a-zA-Z_]*:[0-9]+-[0-9]+'
if ! [[ $INQUIRE_REGION =~ $re ]] ; then
   echo "error: -s '$INQUIRE_REGION' invalid format" >&2;
   exit 1;
fi

if [ -z ${PREFIX+x} ]; then 
	echo "error: missing variable -o PREFIX" >&2;
	exit 1;
fi

# check if input type
re='^[0-9]+$'
if ! [[ $BIN_SIZE =~ $re ]] ; then
   echo "error: -s '$BIN_SIZE' Not a number" >&2;
   exit 1;
fi

if ! [[ $MIN_CPM =~ $re ]] ; then
   echo "error: -m '$MIN_CPM' Not a number" >&2;
   exit 1;
fi

if ! [[ $MIN_COV =~ $re ]] ; then
   echo "error: -m '$MIN_COV' Not a number" >&2;
   exit 1;
fi

if ! [[ $MIN_WIDTH =~ $re ]] ; then
   echo "error: -m '$MIN_WIDTH' Not a number" >&2;
   exit 1;
fi

re='^0.?[0-9]+'
if ! [[ $FDRCUTOFF =~ $re ]] ; then
   echo "error: -p '$FDRCUTOFF' Not a valid number, must between [0, 1]" >&2;
   exit 1;
fi

echo $0 $* 2>&1 | tee $PREFIX.log 
echo 2>&1 | tee -a $PREFIX.log
echo input file: $INPUT 2>&1 | tee -a $PREFIX.log
echo treatment samples ID: $TREAT_ID 2>&1 | tee -a $PREFIX.log
echo control samples ID: $CONTROL_ID 2>&1 | tee -a $PREFIX.log
echo screened region: $INQUIRE_REGION 2>&1 | tee -a $PREFIX.log
echo prefix of output file: $PREFIX 2>&1 | tee -a $PREFIX.log

echo bin size: $BIN_SIZE 2>&1 | tee -a $PREFIX.log
echo valid sgRNA pair min read count \(CPM\): $MIN_CPM 2>&1 | tee -a $PREFIX.log
echo FDR cutoff: $FDRCUTOFF 2>&1 | tee -a $PREFIX.log
echo 2>&1 | tee -a $PREFIX.log

if [ -d $PREFIX\_tmp ]; then
	rm -r $PREFIX\_tmp
fi

if [ ! -d $PREFIX\_tmp ]; then
	mkdir $PREFIX\_tmp
fi

#crest_edger INQURE_REGION=\'$INQUIRE_REGION\' FIN_NAME=\'$INPUT\' GROUPS="c(2,2,2,2,2,1,1)" FOUT_NAME=\"$PREFIX\_tmp/$PREFIX.txt\" MIN_CPM=$MIN_CPM BIN_SIZE=$BIN_SIZE
#RRA -i $PREFIX\_tmp/$PREFIX.txt -o $PREFIX\_tmp/$PREFIX.pvalue.txt -p 0.1 >/dev/null
#crest_peak_call INPUT=\'$PREFIX\_tmp/$PREFIX.pvalue.txt\' PREFIX=\'$PREFIX\' MIN_COV=$MIN_COV MIN_WIDTH=$MIN_WIDTH FDR=$FDRCUTOFF
#
# cleanup
# rm -r $PREFIX\_tmp


