#!/usr/bin/env bash
set -e

# PART I check weather softwares installed
command -v R >/dev/null 2>&1 || { echo >&2 "crest requires R but it is not installed. Aborting."; exit 1; }
command -v crest_sort >/dev/null 2>&1 || { echo >&2 "crest requires crest_sort but it is not installed. Aborting."; exit 1; }
command -v crest_overlap >/dev/null 2>&1 || { echo >&2 "crest requires crest_overlap but it is not installed. Aborting."; exit 1; }
command -v crest_peak_call >/dev/null 2>&1 || { echo >&2 "crest requires crest_peak_call but it is not installed. Aborting."; exit 1; }
command -v RRA >/dev/null 2>&1 || { echo >&2 "crest requires RRA but it is not installed. Aborting."; exit 1; }
command -v python >/dev/null 2>&1 || { echo >&2 "crest requires python but it is not installed. Aborting."; exit 1; }
command -v python >/dev/null 2>&1 || { echo >&2 "crest requires python but it is not installed. Aborting."; exit 1; }
command -v bedGraphToBigWig >/dev/null 2>&1 || { echo >&2 "crest requires bedGraphToBigWig but it is not installed. Aborting."; exit 1; }
command -v fetchChromSizes >/dev/null 2>&1 || { echo >&2 "crest requires fetchChromSizes but it is not installed. Aborting."; exit 1; }

# PART II usage info
usage(){
cat << EOF

Program: crest (CREST-seq analysis pipeline Ren Lab)
Version: v07.02.2016
Contact: Rongxin Fang <r3fang@ucsd.edu>
URL: https://github.com/r3fang/crest

usage: ${0##*/} [-h] [-i INPUT] [-t T1,T2,T3] [-c C1,C2,C3] [-r chr6:30132134-32138339] [-o PREFIX] [-m 5] [-s 50] [-n 3] [-p 0.05] [-l 1000] 

Example:
crest -i data/data.txt -t T1,T2,T3,T4,T5 -c C1,C2 -r chr6:30132134-32138339 -o demo -g hg19

Options: 
  -- required
       -i    STR     input crest-standard matrix.
       -t    STR     treatment sample IDs, seperated by comma without space.
       -c    STR     control sample IDs, seperated by comma without space.
       -r    STR     region that CREST-seq performed against (e.g. chr1:1-100).
       -g    STR     name of genome, e.g.: hg38, hg18, mm9. 
       -o    STR     prefix of outout files.
  -- optional          
       -m    FLOAT   sgRNA pairs with CPM (count per million) smaller than [3] 
                     will be filtered before peak calling.
       -s    INT     screened region -r will be splitted into bins of [50] bp.
       -n    INT     a bin is considered significant with at least [3] pairs span it.
       -p    FLOAT   score cutoff for a significant bin [0.1].
       -l    INT     a peak will be extended to [1000] bp if shorter .

Note: To use crest, please be sure that the input matrix is in the required format.
      Check if your input is crest-required format: 'crest_input_check -i data/data.txt'

EOF
} 

# PART III default parameters
BIN_SIZE=50
MIN_CPM=3
FDRCUTOFF=0.05
MIN_WIDTH=1000
GOOD_SGRNA=3
SCORE_CUTOFF=0.1

# PART IV read in arguments
while getopts ":i:t:c:r:g:o:m:s:n:p:l:" opt;
do
	case "$opt" in
		i) INPUT=$OPTARG;;
		t) TREAT_ID=$OPTARG;;
		c) CONTROL_ID=$OPTARG;;
		r) INQUIRE_REGION=$OPTARG;;
		g) GENOME=$OPTARG;;
		o) PREFIX=$OPTARG;;
		m) MIN_CPM=$OPTARG;;
		s) BIN_SIZE=$OPTARG;;
		n) GOOD_SGRNA=$OPTARG;;
		p) SCORE_CUTOFF=$OPTARG;;
		l) MIN_WIDTH=$OPTARG;;
		\?) usage
			echo "error: unrecoginized option -$OPTARG"
			exit 1
			;;
	esac
done

if [ $# -lt 10 ] ; then
   usage
   echo "error: too few arguments"
   exit 1
fi

if [ -z ${INPUT+x} ]; then 
	echo "error: missing variable -i INPUT" >&2;
	exit 1;
fi
# check if files exist
if [ ! -f $INPUT ]; then
	usage
    echo "error: input file -i '$INPUT' not exists.";
	exit 1;
fi

if [ -z ${TREAT_ID+x} ]; then 
	echo "error: missing variable -t TREAT_ID" >&2;
	exit 1;
fi

if [ -z ${CONTROL_ID+x} ]; then 
	echo "error: missing variable -c CONTROL_ID" >&2;
	exit 1;
fi

if [ -z ${INQUIRE_REGION+x} ]; then 
	echo "error: missing variable -r INQUIRE_REGION" >&2;
	exit 1;
fi

if [ -z ${GENOME+x} ]; then 
	echo "error: missing variable -g GENOME" >&2;
	exit 1;
fi

if [ -z ${PREFIX+x} ]; then 
	echo "error: missing variable -o PREFIX" >&2;
	exit 1;
fi

if [ -z ${MIN_CPM+x} ]; then 
	echo "error: missing variable -m MIN_CPM" >&2;
	exit 1;
fi 

if [ -z ${BIN_SIZE+x} ]; then 
	echo "error: missing variable -s BIN_SIZE" >&2;
	exit 1;
fi

if [ -z ${GOOD_SGRNA+x} ]; then 
	echo "error: missing variable -n GOOD_SGRNA" >&2;
	exit 1;
fi

if [ -z ${SCORE_CUTOFF+x} ]; then 
	echo "error: missing variable -p SCORE_CUTOFF" >&2;
	exit 1;
fi

if [ -z ${MIN_WIDTH+x} ]; then 
	echo "error: missing variable -l MIN_WIDTH" >&2;
	exit 1;
fi

re='^chr[0-9a-zA-Z_]*:[0-9]+-[0-9]+'
if ! [[ $INQUIRE_REGION =~ $re ]] ; then
   echo "error: -r '$INQUIRE_REGION' invalid format (e.g. chr1:1-100)" >&2;
   exit 1;
fi

IFS=':' read -a chr <<< "$INQUIRE_REGION"
IFS='-' read -a pos <<< "${chr[1]}"

REGION_CHR=${chr[0]}
REGION_START=${pos[0]}
REGION_END=${pos[1]}

if [[ ! $REGION_START =~ ^-?[0-9]+$ ]]; then
    echo "error: -r '$INQUIRE_REGION' invalid format (e.g. chr1:1-100)" >&2;
    exit 1;
fi

if [[ ! $REGION_END =~ ^-?[0-9]+$ ]]; then
    echo "error: -r '$INQUIRE_REGION' invalid format (e.g. chr1:1-100)" >&2;
    exit 1;
fi

if [ $REGION_START -gt $REGION_END ]; then
	echo "error: -r '$INQUIRE_REGION' start greater than the end" >&2;
	exit 1;
fi

if [ -z ${PREFIX+x} ]; then 
	echo "error: missing variable -o PREFIX" >&2;
	exit 1;
fi

# check if input type
re='^[0-9]+([.][0-9]+)?$'
if ! [[ $MIN_CPM =~ $re ]] ; then
   echo "error: -m '$MIN_CPM' is not valid number" >&2;
   exit 1;
fi
if ! [[ $SCORE_CUTOFF =~ $re ]] ; then
   echo "error: -p '$SCORE_CUTOFF' is not valid number" >&2;
   exit 1;
fi

re='^[0-9]+$'
if ! [[ $BIN_SIZE =~ $re ]] ; then
   echo "error: -s '$BIN_SIZE' is not valid integer" >&2;
   exit 1;
fi

if ! [[ $GOOD_SGRNA =~ $re ]] ; then
   echo "error: -n '$GOOD_SGRNA' is not valid integer" >&2;
   exit 1;
fi

if ! [[ $MIN_WIDTH =~ $re ]] ; then
   echo "error: -l '$MIN_WIDTH' is not valid integer" >&2;
   exit 1;
fi


echo $0 $* 2>&1 | tee $PREFIX.log 
echo 2>&1 | tee -a $PREFIX.log
echo input file: $INPUT 2>&1 | tee -a $PREFIX.log
echo treatment samples ID: $TREAT_ID 2>&1 | tee -a $PREFIX.log
echo control samples ID: $CONTROL_ID 2>&1 | tee -a $PREFIX.log
echo screened region: $INQUIRE_REGION 2>&1 | tee -a $PREFIX.log
echo prefix of output file: $PREFIX 2>&1 | tee -a $PREFIX.log
echo genome: $GENOME 2>&1 | tee -a $PREFIX.log

echo bin size: $BIN_SIZE 2>&1 | tee -a $PREFIX.log
echo valid sgRNA pair min read count \(CPM\): $MIN_CPM 2>&1 | tee -a $PREFIX.log
echo score cutoff: $SCORE_CUTOFF 2>&1 | tee -a $PREFIX.log
echo 2>&1 | tee -a $PREFIX.log

if [ ! -d $PREFIX\_tmp ]; then
	mkdir $PREFIX\_tmp
fi

fetchChromSizes $GENOME > $PREFIX\_tmp/$GENOME.txt 
[ ! -f $PREFIX\_tmp/$GENOME.txt ] || [ ! -s $PREFIX\_tmp/$GENOME.txt ] && { echo -e "\nFail to fetch chrom.sizes information from UCSC for the genome -g $GENOME. Aborting."; exit 1;}

#echo Step1. rank sgRNA pairs based on it enrichment in the treatment samples
crest_sort FIN_NAME=\"$INPUT\" TREAT_ID=\"$TREAT_ID\" CONTROL_ID=\"$CONTROL_ID\" MIN_CPM=$MIN_CPM FOUT_NAME=\"$PREFIX\_tmp/sgRNA_pair_sorted.txt\" >/dev/null 2>&1 &
while kill -0 $! 2>/dev/null
do
  printf "\r[*                   ] 1 %%"
  sleep .1
done
[ ! -f $PREFIX\_tmp/sgRNA_pair_sorted.txt ] || [ ! -s $PREFIX\_tmp/sgRNA_pair_sorted.txt ] && { echo -e "\nerror: crest_sort fais to sort sgRNA pairs."; exit 1;}

#echo Step2. split the screend region $INQUIRE_REGION into a set of $BIN_SIZE bp bins and find its overlap pairs
crest_overlap FIN_NAME=\"$PREFIX\_tmp/sgRNA_pair_sorted.txt\" CHROM=\"$REGION_CHR\" START=$REGION_START END=$REGION_END BIN_SIZE=$BIN_SIZE FOUT_NAME=\"$PREFIX\_tmp/bins.bed\" >/dev/null 2>&1 &
while kill -0 $! 2>/dev/null
do
  printf "\r[******              ] 30%%"
  sleep .1
done
[ ! -f $PREFIX\_tmp/bins.bed ] || [ ! -s $PREFIX\_tmp/bins.bed ] && { echo -e "\nerror: crest_overlap fais to generate overlaps between bins and sgRNA pairs."; exit 1;}


#echo Step3. generate p value for each genomic bin
RRA -i $PREFIX\_tmp/bins.bed -o $PREFIX\_tmp/bins_pvalue.bed -p 0.1 >/dev/null 2>&1 &
while kill -0 $! 2>/dev/null
do
  printf "\r[**********          ] 50%%"
  sleep .1
done
[ ! -f $PREFIX\_tmp/bins_pvalue.bed ] || [ ! -s $PREFIX\_tmp/bins_pvalue.bed ] && { echo -e "\nerror: RRA fais to generate p value for bins."; exit 1;}

#echo Step4. call peak
crest_peak_call INPUT=\'$PREFIX\_tmp/bins_pvalue.bed\' PREFIX=\'$PREFIX\' GOOD_SGRNA=$GOOD_SGRNA MIN_WIDTH=$MIN_WIDTH CUTOFF=$SCORE_CUTOFF >/dev/null 2>&1 &
while kill -0 $! 2>/dev/null
do
  printf "\r[**************      ] 80%%"
  sleep .1
done
[ ! -f $PREFIX.bed ] || [ ! -s $PREFIX.bed ] && { echo -e "\nerror: crest_peak_call fais to call peaks."; exit 1;}
[ ! -f $PREFIX.bdg ] || [ ! -s $PREFIX.bdg ] && { echo -e "\nerror: crest_peak_call fais to call peaks."; exit 1;}

#echo Step4. convert .beg to .bigWig
sort -k1,1 -k2,2n $PREFIX.bdg > $PREFIX.sorted.bdg &
while kill -0 $! 2>/dev/null
do
  printf "\r[*****************   ] 90%%"
  sleep .1
done
[ ! -f $PREFIX.sorted.bdg ] || [ ! -s $PREFIX.sorted.bdg ] && { echo -e "\nerror: fail to sort .bdg file."; exit 1;}

bedGraphToBigWig $PREFIX.sorted.bdg $PREFIX\_tmp/$GENOME.txt $PREFIX.bw &
while kill -0 $! 2>/dev/null
do
  printf "\r[******************* ] 95%%"
  sleep .1
done
[ ! -f $PREFIX.bw ] || [ ! -s $PREFIX.bw ] && { echo -e "\nerror: fail to generate .bw file."; exit 1;}

sleep 3 2>/dev/null &
while kill -0 $! 2>/dev/null
do
  printf "\r[********************] 100%%"
  sleep .1
done
echo

rm -r $PREFIX\_tmp
rm $PREFIX.sorted.bdg 
rm $PREFIX.bdg
echo "Succeed!"
